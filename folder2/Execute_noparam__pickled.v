//-------------------------------------------------------------------------
// Execute_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component Execute Definition
// At /home/varun/PycharmProjects/R-Type/Execute.py

module Execute_noparam
(
  output logic [31:0] branch ,
  input  logic [0:0] clk ,
  input  logic [31:0] dataSourceRegister1 ,
  input  logic [31:0] dataSourceRegister2 ,
  input  logic [2:0] func3 ,
  input  logic [6:0] func7 ,
  input  logic [31:0] immediate ,
  input  logic [31:0] instruction ,
  output logic [0:0] isBranchTaken ,
  output logic [0:0] isLoadInstruction ,
  output logic [0:0] isStoreInstruction ,
  output logic [31:0] jumpAddress ,
  output logic [31:0] memoryAddress ,
  output logic [31:0] memoryData ,
  input  logic [6:0] opcode ,
  input  logic [31:0] programCounter ,
  input  logic [0:0] reset ,
  output logic [31:0] result 
);
  logic [6:0] __tmpvar__execute_opcode;
  logic [2:0] __tmpvar__execute_funct3;
  logic [6:0] __tmpvar__execute_funct7;
  logic [31:0] __tmpvar__execute_immediate;

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/Execute.py:29
  // @update
  // def execute():
  //     opcode = s.opcode
  //     funct3 = s.func3
  //     funct7 = s.func7
  //     immediate = s.immediate
  // 
  //     # OP_IMM instructions
  //     if opcode == 0b0010011:
  //         if funct3 == 0b000:  # ADDI
  //             s.result @= s.dataSourceRegister1 + immediate
  //         elif funct3 == 0b010:  # SLTI
  //             s.result @= 1 if(s.dataSourceRegister1 < immediate) else 0
  //         # elif funct3 == 0b011:  # SLTIU
  //         #     s.result @= (abs(s.dataSourceRegister1) < abs(immediate))
  //         elif funct3 == 0b100:  # XORI
  //             s.result @= s.dataSourceRegister1 ^ immediate
  //         elif funct3 == 0b110:  # ORI
  //             s.result @= s.dataSourceRegister1 | immediate
  //         elif funct3 == 0b111:  # ANDI
  //             s.result @= s.dataSourceRegister1 & immediate
  //         elif (funct3 == 0b001) & (funct7 == 0b0000000):  # SLLI
  //             s.result @= s.dataSourceRegister1 << immediate[0:5]
  //         elif funct3 == 0b101:
  //             if funct7 == 0b0000000:  # SRLI
  //                 s.result @= s.dataSourceRegister1 >> immediate[0:5]
  //             elif funct7 == 0b0100000:  # SRAI
  //                 s.result @= s.dataSourceRegister1 >> immediate[0:5]
  // 
  //     # OP instructions
  //     elif opcode == 0b0110011:
  //         if funct3 == 0b000:
  //             if funct7 == 0b0000000:  # ADD
  //                 s.result @= s.dataSourceRegister1 + s.dataSourceRegister2
  //             elif funct7 == 0b0100000:  # SUB
  //                 s.result @= s.dataSourceRegister1 - s.dataSourceRegister2
  //         elif (funct3 == 0b001) & (funct7 == 0b0000000):  # SLL
  //             s.result @= s.dataSourceRegister1 << s.dataSourceRegister2[0:5]
  //         elif funct3 == 0b010:  # SLT
  //             s.result @= 1 if(s.dataSourceRegister1 < s.dataSourceRegister2) else 0
  //         elif funct3 == 0b011:  # SLTU
  //             s.result @= 1 if(s.dataSourceRegister1 < s.dataSourceRegister2) else 0
  //         elif funct3 == 0b100:  # XOR
  //             s.result @= s.dataSourceRegister1 ^ s.dataSourceRegister2
  //         elif funct3 == 0b101:
  //             if funct7 == 0b0000000:  # SRL
  //                 s.result @= s.dataSourceRegister1 >> s.dataSourceRegister2[0:5]
  //             elif funct7 == 0b0100000:  # SRA
  //                 s.result @= s.dataSourceRegister1 >> s.dataSourceRegister2[0:5]
  //         elif funct3 == 0b110:  # OR
  //             s.result @= s.dataSourceRegister1 | s.dataSourceRegister2
  //         elif funct3 == 0b111:  # AND
  //             s.result @= s.dataSourceRegister1 & s.dataSourceRegister2
  // 
  //     # Load instructions
  //     elif opcode == 0b0000011:
  //         s.isLoadInstruction @= 1
  //         if funct3 == 0b000:  # LB
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             #s.memoryData = s.mem[s.memoryAddress][0:8].sext(32)
  //             s.result @= s.memoryAddress
  //         elif funct3 == 0b001:  # LH
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             #s.memoryData = s.mem[s.memoryAddress][0:16].sext(32)
  //             s.result @= s.memoryAddress
  //         elif funct3 == 0b010:  # LW
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             #s.memoryData = s.mem[s.memoryAddress].sext(32)
  //             s.result @= s.memoryAddress
  // 
  //     # Store instructions
  //     elif opcode == 0b0100011:
  //         s.isStoreInstruction @= 1
  //         if funct3 == 0b000:  # SB
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             s.memoryData @= sext(s.dataSourceRegister2[0:8],32)
  //             # s.mem[s.memoryAddress][0:8] = s.memoryData[0:8]
  //         elif funct3 == 0b001:  # SH
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             s.memoryData @= sext(s.dataSourceRegister2[0:16],32)
  //             # s.mem[s.memoryAddress][0:16] = s.memoryData[0:16]
  //         elif funct3 == 0b010:  # SW
  //             s.memoryAddress @= s.dataSourceRegister1 + immediate
  //             s.memoryData @= s.dataSourceRegister2
  //             # s.mem[s.memoryAddress] = s.memoryData
  // 
  //     # Branch instructions
  //     elif opcode == 0b1100011:
  //         s.isBranchTaken @= 1
  //         if funct3 == 0b000:  # BEQ
  //             if s.dataSourceRegister1 == s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  //         elif funct3 == 0b001:  # BNE
  //             if s.dataSourceRegister1 != s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  //         elif funct3 == 0b100:  # BLT
  //             if s.dataSourceRegister1 < s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  //         elif funct3 == 0b101:  # BGE
  //             if s.dataSourceRegister1 >= s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  //         elif funct3 == 0b110:  # BLTU
  //             if s.dataSourceRegister1 < s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  //         elif funct3 == 0b111:  # BGEU
  //             if s.dataSourceRegister1 >= s.dataSourceRegister2:
  //                 s.branch @= s.programCounter + immediate
  // 
  //     # Jump instructions
  //     elif opcode == 0b1101111:  # JAL
  //         s.jumpAddress @= s.programCounter + immediate
  //         s.result @= s.programCounter + 4
  // 
  //     elif opcode == 0b1101111:  # JAL
  //         s.jumpAddress @= s.programCounter + immediate
  //         s.result @= s.programCounter + 4
  // 
  //     elif opcode == 0b1100111:  # JALR
  //         s.jumpAddress @= (s.dataSourceRegister1 + immediate) & (0xFFFFFFFE)
  //         s.result @= s.programCounter + 4
  
  always_comb begin : execute
    __tmpvar__execute_opcode = opcode;
    __tmpvar__execute_funct3 = func3;
    __tmpvar__execute_funct7 = func7;
    __tmpvar__execute_immediate = immediate;
    if ( __tmpvar__execute_opcode == 7'd19 ) begin
      if ( __tmpvar__execute_funct3 == 3'd0 ) begin
        result = dataSourceRegister1 + __tmpvar__execute_immediate;
      end
      else if ( __tmpvar__execute_funct3 == 3'd2 ) begin
        result = ( dataSourceRegister1 < __tmpvar__execute_immediate ) ? 32'd1 : 32'd0;
      end
      else if ( __tmpvar__execute_funct3 == 3'd4 ) begin
        result = dataSourceRegister1 ^ __tmpvar__execute_immediate;
      end
      else if ( __tmpvar__execute_funct3 == 3'd6 ) begin
        result = dataSourceRegister1 | __tmpvar__execute_immediate;
      end
      else if ( __tmpvar__execute_funct3 == 3'd7 ) begin
        result = dataSourceRegister1 & __tmpvar__execute_immediate;
      end
      else if ( ( __tmpvar__execute_funct3 == 3'd1 ) & ( __tmpvar__execute_funct7 == 7'd0 ) ) begin
        result = dataSourceRegister1 << __tmpvar__execute_immediate[5'd4:5'd0];
      end
      else if ( __tmpvar__execute_funct3 == 3'd5 ) begin
        if ( __tmpvar__execute_funct7 == 7'd0 ) begin
          result = dataSourceRegister1 >> __tmpvar__execute_immediate[5'd4:5'd0];
        end
        else if ( __tmpvar__execute_funct7 == 7'd32 ) begin
          result = dataSourceRegister1 >> __tmpvar__execute_immediate[5'd4:5'd0];
        end
      end
    end
    else if ( __tmpvar__execute_opcode == 7'd51 ) begin
      if ( __tmpvar__execute_funct3 == 3'd0 ) begin
        if ( __tmpvar__execute_funct7 == 7'd0 ) begin
          result = dataSourceRegister1 + dataSourceRegister2;
        end
        else if ( __tmpvar__execute_funct7 == 7'd32 ) begin
          result = dataSourceRegister1 - dataSourceRegister2;
        end
      end
      else if ( ( __tmpvar__execute_funct3 == 3'd1 ) & ( __tmpvar__execute_funct7 == 7'd0 ) ) begin
        result = dataSourceRegister1 << dataSourceRegister2[5'd4:5'd0];
      end
      else if ( __tmpvar__execute_funct3 == 3'd2 ) begin
        result = ( dataSourceRegister1 < dataSourceRegister2 ) ? 32'd1 : 32'd0;
      end
      else if ( __tmpvar__execute_funct3 == 3'd3 ) begin
        result = ( dataSourceRegister1 < dataSourceRegister2 ) ? 32'd1 : 32'd0;
      end
      else if ( __tmpvar__execute_funct3 == 3'd4 ) begin
        result = dataSourceRegister1 ^ dataSourceRegister2;
      end
      else if ( __tmpvar__execute_funct3 == 3'd5 ) begin
        if ( __tmpvar__execute_funct7 == 7'd0 ) begin
          result = dataSourceRegister1 >> dataSourceRegister2[5'd4:5'd0];
        end
        else if ( __tmpvar__execute_funct7 == 7'd32 ) begin
          result = dataSourceRegister1 >> dataSourceRegister2[5'd4:5'd0];
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd6 ) begin
        result = dataSourceRegister1 | dataSourceRegister2;
      end
      else if ( __tmpvar__execute_funct3 == 3'd7 ) begin
        result = dataSourceRegister1 & dataSourceRegister2;
      end
    end
    else if ( __tmpvar__execute_opcode == 7'd3 ) begin
      isLoadInstruction = 1'd1;
      if ( __tmpvar__execute_funct3 == 3'd0 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        result = memoryAddress;
      end
      else if ( __tmpvar__execute_funct3 == 3'd1 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        result = memoryAddress;
      end
      else if ( __tmpvar__execute_funct3 == 3'd2 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        result = memoryAddress;
      end
    end
    else if ( __tmpvar__execute_opcode == 7'd35 ) begin
      isStoreInstruction = 1'd1;
      if ( __tmpvar__execute_funct3 == 3'd0 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        memoryData = { { 24 { dataSourceRegister2[5'd7] } }, dataSourceRegister2[5'd7:5'd0] };
      end
      else if ( __tmpvar__execute_funct3 == 3'd1 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        memoryData = { { 16 { dataSourceRegister2[5'd15] } }, dataSourceRegister2[5'd15:5'd0] };
      end
      else if ( __tmpvar__execute_funct3 == 3'd2 ) begin
        memoryAddress = dataSourceRegister1 + __tmpvar__execute_immediate;
        memoryData = dataSourceRegister2;
      end
    end
    else if ( __tmpvar__execute_opcode == 7'd99 ) begin
      isBranchTaken = 1'd1;
      if ( __tmpvar__execute_funct3 == 3'd0 ) begin
        if ( dataSourceRegister1 == dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd1 ) begin
        if ( dataSourceRegister1 != dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd4 ) begin
        if ( dataSourceRegister1 < dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd5 ) begin
        if ( dataSourceRegister1 >= dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd6 ) begin
        if ( dataSourceRegister1 < dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
      else if ( __tmpvar__execute_funct3 == 3'd7 ) begin
        if ( dataSourceRegister1 >= dataSourceRegister2 ) begin
          branch = programCounter + __tmpvar__execute_immediate;
        end
      end
    end
    else if ( __tmpvar__execute_opcode == 7'd111 ) begin
      jumpAddress = programCounter + __tmpvar__execute_immediate;
      result = programCounter + 32'd4;
    end
    else if ( __tmpvar__execute_opcode == 7'd111 ) begin
      jumpAddress = programCounter + __tmpvar__execute_immediate;
      result = programCounter + 32'd4;
    end
    else if ( __tmpvar__execute_opcode == 7'd103 ) begin
      jumpAddress = ( dataSourceRegister1 + __tmpvar__execute_immediate ) & 32'd4294967294;
      result = programCounter + 32'd4;
    end
  end

endmodule
