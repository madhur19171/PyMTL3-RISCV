//-------------------------------------------------------------------------
// Decoder_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component RegisterFile Definition
// At /home/varun/PycharmProjects/R-Type/RegisterFile.py

module RegisterFile_noparam
(
  input  logic [4:0] AddrDestinationRegister ,
  input  logic [4:0] AddrSourceRegister1 ,
  input  logic [4:0] AddrSourceRegister2 ,
  input  logic [0:0] clk ,
  input  logic [31:0] dataIn ,
  output logic [31:0] dataOutSourceRegister1 ,
  output logic [31:0] dataOutSourceRegister2 ,
  input  logic [0:0] readEnable ,
  input  logic [0:0] reset ,
  input  logic [0:0] writeEnable 
);
  logic [31:0] RegisterFile [0:31];

endmodule


// PyMTL Component Decoder Definition
// At /home/varun/PycharmProjects/R-Type/Decoder.py

module Decoder_noparam
(
  output logic [31:0] DecoderDataOutSourceRegister1 ,
  output logic [31:0] DecoderDataOutSourceRegister2 ,
  input  logic [0:0] clk ,
  input  logic [31:0] dataIn ,
  output logic [2:0] func3 ,
  output logic [6:0] func7 ,
  output logic [31:0] immediate ,
  input  logic [31:0] instruction ,
  output logic [6:0] opcode ,
  output logic [31:0] programCounter ,
  input  logic [0:0] reset ,
  input  logic [0:0] writeEnable 
);
  localparam logic [4:0] __const__OP_immediate  = 5'd19;
  localparam logic [1:0] __const__LOAD  = 2'd3;
  localparam logic [5:0] __const__STORE  = 6'd35;
  localparam logic [6:0] __const__BRANCH  = 7'd99;
  localparam logic [5:0] __const__LUI  = 6'd55;
  localparam logic [6:0] __const__JAL  = 7'd111;
  localparam logic [6:0] __const__JALR  = 7'd103;
  logic [31:0] dataInSourceRegister1;
  logic [31:0] dataInSourceRegister2;
  logic [4:0] destinationRegister;
  logic [4:0] sourceRegister1;
  logic [4:0] sourceRegister2;
  //-------------------------------------------------------------
  // Component RegisterFile
  //-------------------------------------------------------------

  logic [4:0] RegisterFile__AddrDestinationRegister;
  logic [4:0] RegisterFile__AddrSourceRegister1;
  logic [4:0] RegisterFile__AddrSourceRegister2;
  logic [0:0] RegisterFile__clk;
  logic [31:0] RegisterFile__dataIn;
  logic [31:0] RegisterFile__dataOutSourceRegister1;
  logic [31:0] RegisterFile__dataOutSourceRegister2;
  logic [0:0] RegisterFile__readEnable;
  logic [0:0] RegisterFile__reset;
  logic [0:0] RegisterFile__writeEnable;

  RegisterFile_noparam RegisterFile
  (
    .AddrDestinationRegister( RegisterFile__AddrDestinationRegister ),
    .AddrSourceRegister1( RegisterFile__AddrSourceRegister1 ),
    .AddrSourceRegister2( RegisterFile__AddrSourceRegister2 ),
    .clk( RegisterFile__clk ),
    .dataIn( RegisterFile__dataIn ),
    .dataOutSourceRegister1( RegisterFile__dataOutSourceRegister1 ),
    .dataOutSourceRegister2( RegisterFile__dataOutSourceRegister2 ),
    .readEnable( RegisterFile__readEnable ),
    .reset( RegisterFile__reset ),
    .writeEnable( RegisterFile__writeEnable )
  );

  //-------------------------------------------------------------
  // End of component RegisterFile
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/Decoder.py:44
  // @update
  // def decode():
  //     # Extract fields
  //     s.programCounter @= s.instruction
  //     s.func7 @= s.instruction[25:32]
  //     s.sourceRegister2 @= s.instruction[20:25]
  //     s.sourceRegister1 @= s.instruction[15:20]
  //     s.func3 @= s.instruction[12:15]
  //     s.destinationRegister @= s.instruction[7:12]
  //     s.opcode @= s.instruction[0:7]
  // 
  //     s.dataInSourceRegister1 @= s.RegisterFile.dataOutSourceRegister1
  //     s.dataInSourceRegister2 @= s.RegisterFile.dataOutSourceRegister2
  // 
  //     s.DecoderDataOutSourceRegister1 @= s.dataInSourceRegister1
  //     s.DecoderDataOutSourceRegister2 @= s.dataInSourceRegister2
  // 
  //     # Decode instruction
  //     if s.opcode == OP_immediate:
  //         # ADDI, SLTI, SLTIU, XORI, ORI, ANDI, SLLI, SRLI, SRAI
  //         if (s.func3 == 1) | (s.func3 == 5):
  //             s.immediate @= sext(s.instruction[20:25], 32)
  //         else:
  //             s.immediate @= sext(s.instruction[20:32], 32)
  // 
  //     elif s.opcode == LOAD:
  //         # LB, LH, LW, LBU, LHU
  //         s.immediate @= sext(s.instruction[20:32], 32)
  // 
  //     elif s.opcode == STORE:
  //         # SB, SH, SW
  //         s.immediate @= sext(concat(s.instruction[7:12] , s.instruction[25:32]), 32)
  // 
  //     elif s.opcode == BRANCH:
  //         # BEQ, BNE, BLT, BGE, BLTU, BGEU
  //         s.immediate @= sext(concat(s.instruction[31], s.instruction[7], s.instruction[25:30], s.instruction[8:11]),32)
  // 
  //     elif s.opcode == LUI:
  //         # LUI
  //         s.immediate @= sext(s.instruction[12:32], 32)
  // 
  //     elif s.opcode == JAL:
  //         # JAL
  //         s.immediate @= sext(concat(s.instruction[12] ,s.instruction[20:31], s.instruction[12:20], s.instruction[31]),32)
  // 
  //     elif s.opcode == JALR:
  //         # JALR
  //         s.immediate @= sext(s.instruction[20:32], 32)
  
  always_comb begin : decode
    programCounter = instruction;
    func7 = instruction[5'd31:5'd25];
    sourceRegister2 = instruction[5'd24:5'd20];
    sourceRegister1 = instruction[5'd19:5'd15];
    func3 = instruction[5'd14:5'd12];
    destinationRegister = instruction[5'd11:5'd7];
    opcode = instruction[5'd6:5'd0];
    dataInSourceRegister1 = RegisterFile__dataOutSourceRegister1;
    dataInSourceRegister2 = RegisterFile__dataOutSourceRegister2;
    DecoderDataOutSourceRegister1 = dataInSourceRegister1;
    DecoderDataOutSourceRegister2 = dataInSourceRegister2;
    if ( opcode == 7'( __const__OP_immediate ) ) begin
      if ( ( func3 == 3'd1 ) | ( func3 == 3'd5 ) ) begin
        immediate = { { 27 { instruction[5'd24] } }, instruction[5'd24:5'd20] };
      end
      else
        immediate = { { 20 { instruction[5'd31] } }, instruction[5'd31:5'd20] };
    end
    else if ( opcode == 7'( __const__LOAD ) ) begin
      immediate = { { 20 { instruction[5'd31] } }, instruction[5'd31:5'd20] };
    end
    else if ( opcode == 7'( __const__STORE ) ) begin
      immediate = { { 20 { { instruction[5'd11:5'd7], instruction[5'd31:5'd25] }[11] } }, { instruction[5'd11:5'd7], instruction[5'd31:5'd25] } };
    end
    else if ( opcode == 7'( __const__BRANCH ) ) begin
      immediate = { { 22 { { instruction[5'd31], instruction[5'd7], instruction[5'd29:5'd25], instruction[5'd10:5'd8] }[9] } }, { instruction[5'd31], instruction[5'd7], instruction[5'd29:5'd25], instruction[5'd10:5'd8] } };
    end
    else if ( opcode == 7'( __const__LUI ) ) begin
      immediate = { { 12 { instruction[5'd31] } }, instruction[5'd31:5'd12] };
    end
    else if ( opcode == 7'( __const__JAL ) ) begin
      immediate = { { 11 { { instruction[5'd12], instruction[5'd30:5'd20], instruction[5'd19:5'd12], instruction[5'd31] }[20] } }, { instruction[5'd12], instruction[5'd30:5'd20], instruction[5'd19:5'd12], instruction[5'd31] } };
    end
    else if ( opcode == 7'( __const__JALR ) ) begin
      immediate = { { 20 { instruction[5'd31] } }, instruction[5'd31:5'd20] };
    end
  end

  assign RegisterFile__clk = clk;
  assign RegisterFile__reset = reset;
  assign RegisterFile__readEnable = 1'd1;
  assign RegisterFile__writeEnable = writeEnable;
  assign RegisterFile__AddrSourceRegister1 = sourceRegister1;
  assign RegisterFile__AddrSourceRegister2 = sourceRegister2;
  assign RegisterFile__AddrDestinationRegister = destinationRegister;

endmodule
