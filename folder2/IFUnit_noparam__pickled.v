//-------------------------------------------------------------------------
// IFUnit_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component InstructionMemory Definition
// At /home/varun/PycharmProjects/R-Type/InstructionMemory.py

module InstructionMemory_noparam
(
  input  logic [7:0] address ,
  input  logic [0:0] clk ,
  output logic [31:0] dataOut ,
  input  logic [0:0] en ,
  input  logic [0:0] reset 
);
  logic [31:0] mem [0:255];

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/InstructionMemory.py:12
  // @update_ff
  // def read_logic():
  //     if self.en == 1:
  //         self.dataOut <<= self.mem[self.address]
  
  always_ff @(posedge clk) begin : read_logic
    if ( en == 1'd1 ) begin
      dataOut <= mem[address];
    end
  end

endmodule


// PyMTL Component IFUnit Definition
// At /home/varun/PycharmProjects/R-Type/IFUnit_alter.py

module IFUnit_noparam
(
  input  logic [7:0] branchInstructionIn ,
  input  logic [0:0] clk ,
  input  logic [0:0] en ,
  output logic [7:0] instructionAddressOut ,
  output logic [31:0] instructionOut ,
  input  logic [0:0] isBranchTaken ,
  input  logic [0:0] reset ,
  input  logic [0:0] stall 
);
  logic [7:0] nextPC;
  logic [7:0] tempAddress;
  logic [7:0] tempAddressMem;
  //-------------------------------------------------------------
  // Component instructionMemory
  //-------------------------------------------------------------

  logic [7:0] instructionMemory__address;
  logic [0:0] instructionMemory__clk;
  logic [31:0] instructionMemory__dataOut;
  logic [0:0] instructionMemory__en;
  logic [0:0] instructionMemory__reset;

  InstructionMemory_noparam instructionMemory
  (
    .address( instructionMemory__address ),
    .clk( instructionMemory__clk ),
    .dataOut( instructionMemory__dataOut ),
    .en( instructionMemory__en ),
    .reset( instructionMemory__reset )
  );

  //-------------------------------------------------------------
  // End of component instructionMemory
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/IFUnit_alter.py:33
  // @update
  // def assignData():
  //     s.instructionOut @= s.instructionMemory.dataOut
  
  always_comb begin : assignData
    instructionOut = instructionMemory__dataOut;
  end

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/IFUnit_alter.py:21
  // @update
  // def sendAddress():
  //     if (s.en == 1) & (s.stall != 1):
  //         if s.isBranchTaken == 1:
  //             s.instructionMemory.address  @= s.branchInstructionIn
  //         else:
  //             s.instructionMemory.address  @= s.nextPC
  //             s.nextPC @= s.tempAddress + 4
  // 
  //     #s.instructionMemory.address @= s.tempAddressMem
  //     s.instructionAddressOut @= s.instructionMemory.address
  
  always_comb begin : sendAddress
    if ( ( en == 1'd1 ) & ( stall != 1'd1 ) ) begin
      if ( isBranchTaken == 1'd1 ) begin
        instructionMemory__address = branchInstructionIn;
      end
      else begin
        instructionMemory__address = nextPC;
        nextPC = tempAddress + 8'd4;
      end
    end
    instructionAddressOut = instructionMemory__address;
  end

  // PyMTL Update Block Source
  // At /home/varun/PycharmProjects/R-Type/IFUnit_alter.py:36
  // @update_ff
  // def Assign():
  //     s.tempAddress <<= s.nextPC
  
  always_ff @(posedge clk) begin : Assign
    tempAddress <= nextPC;
  end

  assign instructionMemory__clk = clk;
  assign instructionMemory__reset = reset;
  assign instructionMemory__en = en;

endmodule
